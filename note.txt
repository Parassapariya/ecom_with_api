1) 
-> create npm init,folder(controllers,models,routes,config,middlewares),index.js

2)
->some pakege install like express,mongoose,dotenv,body-parser

3)
->in index.js we implement express with app and make port in .env file and we can use in index.js 

4)
->make connection of mongoose in config  file and exprots after in index.js and connection() call that..

5)
->connection successfully we can make a model schema and exports into controllers

6)
->controller make and use model after we perfom create, login and its export into routes

7)we make a route and controller use in express.route() ex..
    route.post('/registration',createUser);
->after make and exports it..

8)
->index.js we can use it route exx.
    app.use("/api/user/",userroute);
->use also body-parser
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({extended:false}));

9)
->we can make a password bcrypt of users  show install (npm i bcrypt) and use into the models

10)
->inthis model we can use schema.pre methods ex.
    userSchema.pre('save',async function (next){
        const salt = await bcrypt.genSaltSync(10);  //use to gunrate salt of password
        this.password = await bcrypt.hash(this.password ,salt);  //use to assign password field
    });

11)
->we can login show bcrypt password excrypt in this model also ex..
    userSchema.methods.isPasswordMatch = async function(enterpass){
        return await bcrypt.compare(enterpass,this.password)//return excrypt password
    }
->we can use this method into the login controller

12)
->  use into the controller check login conditions
    if (finduser && (await finduser.isPasswordMatch(password))) 

13)
-> if login success show we can gunrate its user token we can use (npm i jsonwebtoken) 
->into the config file we can make a new file into this token and exports it
    const gurateToken = (id)=>{
        return token.sign({id},process.env.SECRET_KEY,{ expiresIn:"3d" });
    }

14)
->after we can check if user login show make its token ex.
     res.json({
            _id: finduser?._id,
            FirstName: finduser?.FirstName,
            LastName: finduser?.LastName,
            email: finduser?.email,
            mobile: finduser?.mobile,
            token:gurateToken(finduser?._id),  //token make of this _id
        });
15)
->make a user getall, getone, deleteone, updateone api and its controller and routes

16)
->we can use in middlewares async-hendler for async task AND its npm pakege install express-async-handler.
->make a middlewares for check is token varify show its work otherwise not work in api.
->we can use jwt token.
          let tokan;
            try {
                if (req.headers.authorization.startsWith("Bearer")) {
                    tokan = req.headers.authorization.split(" ")[1];
                    // let test = req.headers.authorization.startsWith("Bearer");
                    // console.log(test);
                    try {
                        if (tokan) {
                            const decoded = jwt.verify(tokan,process.env.SECRET_KEY);
                            let data = await user.findById({_id:decoded.id});
                            req.data = data;
                            next();
                        } 
                    } catch (error) {
                        res.json({
                            msg : "not authorization",
                        })
                    }
                }
            } catch (error) {
                res.json({
                    msg : "error",
                })
            }

17)
-> its middlewares impliment into the routes 

18)
-> one more make middlewares for isadmin or not check for api update,block and unbloked user opration.
 if its admin show perform all task otherwise not use
    let data = await user.findOne({email:req.data.email});
    if (data.Role !== "admin") {
        res.json({
            msg : "you are not admin"
        })
    } else {
        next();
    }


19)
->you make a utils folder and make a validationmongooseid check that
    const validatemongoid = (id)=>{
        const isvalid = mongoose.Types.ObjectId.isValid(id);
        if (!isvalid) {
            console.log("This Id is not valid or not found");
        }
    }

20)
->we make a refressTokan in config file
    const refressToken = (id)=>{
        return token.sign({id},process.env.SECRET_KEY,{ expiresIn:"3d" });
    }

21)
-> add cookie-parser and use into the index app.use(cookieparser())
-> afteruse into refressTokan into the login system 
     const refreshTokan = refressToken(finduser._id);  //gunrate refreshTokan
        const updateuser = await User.findByIdAndUpdate(  //update refreshTokan in user id
            {
                _id: finduser._id
            },
            {
                refreshTokan: refreshTokan
            },
            {
                new: true
            }
        );
    res.cookie("refreshTokan", refreshTokan, {  //name of cookie and maxage of cookie in this res
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000,
    })

22)
->  refress Tokan Hendler , refreshTokan gunrated and cookie check , 
    if available show find its user and jwt varify that tokan
            const cookie = req.cookies;
            if (!cookie.refreshTokan) {
                res.json({
                    msg: "Not Tokan Avilable In Cookie!!",
                    success: false,
                })
            } else {
                let cookietokan = cookie.refreshTokan;
                let result = await User.findOne({
                    refreshTokan: cookietokan
                });
                if (result) {
                    jwt.verify(cookietokan, process.env.SECRET_KEY, (err, decoded) => {
                        // console.log(decoded);
                        if (err || result.id !== decoded.id) {
                            res.json({
                                msg: "There Is Something Wrong In RefressTokan!!",
                                success: false,
                            })
                        } else {
                            let aceesTokan = gurateToken(result._id)
                            res.json({
                                aceesTokan
                            })
                        }
                    })
                } else {
                    res.json({
                        msg: "Not Tokan Avilable In Db!!",
                        success: false,
                    })
                }
            }

23)
->log out that user and cookie clear in controller and upadte refreshTokan clear in logout
            let refreshTokan = cookie.refreshTokan;
            let result = await User.findOne({
                refreshTokan: refreshTokan
            });
            if (!result) {
                res.clearCookie("refreshTokan", {
                    httpOnly: true,
                    secure: true
                });
                return res.sendStatus(204);
            } 
                await User.findByIdAndUpdate(
                    {
                        _id: result.id
                    },
                    {
                        refreshTokan: ""
                    }
                );
                res.clearCookie("refreshTokan", {
                    httpOnly: true,
                    secure: true
                });
                return res.sendStatus(204);

24) 
-> create model of product schema and after its export into the controller make product controller

25)
->in this controller we can make a create, getone , allget , delete, update , product in thisa controller and after 
    export it ...

26)
->we create a route product and impliment into the index.js and import the product controller in this route
    like(create,get,delete)

27)
->after all set we also impliment in route middlewares so auth, isadmin we can use..

28)
->we can use the slugify npm package for the slug name blank space and copy that product name into the slug..

29)
->after we can use the req.query in get all product like a sort,pagination,compare,filed in  
this section we have filtering of our product

    1)comperision
    ->  let newquery = JSON.stringify(query);
        newquery = newquery.replace(/\b(gte|gt|lt|lte)\b/g , (match) => `$${match}`)
        let finalquery = Product.find(JSON.parse(newquery));
    
    2)sort
    ->  //Shorting
        if (req.query.sort) {
            let sortby = req.query.sort.split(',').join(" ");
            console.log("Sort:"+sortby);
            finalquery = finalquery.sort(sortby); //finalquery is query find 
        }else{
            finalquery = finalquery.sort("-createdAt");
        }

    3)fileds show 
    ->//field
        if (req.query.fields) {
            let fieldsby = req.query.fields.split(',').join(" ");
            console.log("fileds:"+fieldsby);
            finalquery = finalquery.select(fieldsby);
        }else{
            finalquery = finalquery.select("-__v");
        }

    4)pagination
    ->  const page = req.query.page;
        const limit = req.query.limit;
        const skip = (page-1) * limit;
        finalquery = finalquery.skip(skip).limit(limit);
        if (req.query.page) {
            const pdcount = await Product.countDocuments();
            if (skip >= pdcount) {
                res.json({
                    msg:"This page is not available"
                })
            }
        }


